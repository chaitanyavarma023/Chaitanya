#!/bin/sh
# arg: 1=Packet_Type, 2=Packet_Src_IP_Address 3=Class
# "Called-Station-Id" "Calling-Station-Id" "Acct-Session-Id" "User-Name"
# "Idle-Timeout" "Acct-Interim-Interval"
# "Session-Timeout" "WISPr-Session-Terminate-Time" "WISPr-Session-Terminate-End-Of-Day" "WISPr-Billing-Class-Of-Service"
# "ZVendor-Byte-Amount-4GB,ZVendor-Byte-Amount" "ZVendor-MaxByteIn-4GB,ZVendor-MaxByteIn" "ZVendor-MaxByteOut-4GB,ZVendor-MaxByteOut"
# "Class" "WISPr-Bandwidth-Min-Up" "WISPr-Bandwidth-Max-Up" "WISPr-Bandwidth-Min-Down" "WISPr-Bandwidth-Max-Down"

. /conf/etc/profile
. /ramfs/radius/bin/functions
. /ramfs/bin/radius_func

# necessary attributes
packet_type=$(muse "${1}")   # CoA-Request or Disconnect-Request
packet_src_ip_address=$(muse "${2}")   # Packet Source IP Address
called_station_id=$(muse "${CALLED_STATION_ID}")
calling_station_id=$(muse "${CALLING_STATION_ID}")
called_station_id=$(/ramfs/bin/stationid2mac "${called_station_id}")
calling_station_id=$(/ramfs/bin/stationid2mac "${calling_station_id}")
acct_session_id=$(muse "${ACCT_SESSION_ID}")
acct_terminte_cause=$(muse "${ACCT_TERMINATE_CAUSE}")
user_name=$(muse "${USER_NAME}")
nas_info=$(get_nas_info ${packet_src_ip_address})   # get_nas_info from nas_list
framed_ip_address=$(muse "${FRAMED_IP_ADDRESS}")

# time attributes
idle_timeout=$(muse "${IDLE_TIMEOUT}")
acct_interim_interval=$(muse "${ACCT_INTERIM_INTERVAL}")
session_timeout=$(muse "${SESSION_TIMEOUT}")
wispr_session_terminate_time=$(muse "${WISPR_SESSION_TERMINATE_TIME}")
wispr_session_terminate_end_of_day=$(muse "${WISPR_SESSION_TERMINATE_END_OF_DAY}")
wispr_billing_class_of_service=$(muse "${WISPR_BILLING_CLASS_OF_SERVICE}")

# QoS attributes
REPLIED_CLASS=""
for c in ${3}; do
  tmp="$(echo "$c" | sed "s/^\"//;s/\"$//")"
    REPLIED_CLASS="${REPLIED_CLASS}|${tmp}"
done
[ -n "$REPLIED_CLASS" ] && REPLIED_CLASS="${REPLIED_CLASS/|/}"
#class=$(muse "${CLASS[1]}")
wispr_bandwidth_min_up=$(muse "${WISPR_BANDWIDTH_MIN_UP}")
wispr_bandwidth_max_up=$(muse "${WISPR_BANDWIDTH_MAX_UP}")
wispr_bandwidth_min_down=$(muse "${WISPR_BANDWIDTH_MIN_DOWN}")
wispr_bandwidth_max_down=$(muse "${WISPR_BANDWIDTH_MAX_DOWN}")

# amount attributes
zvendor_byte_amount_4gb=$(muse "${ZVENDOR_BYTE_AMOUNT_4GB}")
zvendor_byte_amount=$(muse "${ZVENDOR_BYTE_AMOUNT}")
zvendor_maxbytein_4gb=$(muse "${ZVENDOR_MAXBYTEIN_4GB}")
zvendor_maxbytein=$(muse "${ZVENDOR_MAXBYTEIN}")
zvendor_maxbyteout_4gb=$(muse "${ZVENDOR_MAXBYTEOUT_4GB}")
zvendor_maxbyteout=$(muse "${ZVENDOR_MAXBYTEOUT}")

ret=0  # 0=ACK, 1=NAK

read_online_file()
{
MAC=$1
if [ -f "/db/online/$MAC" ]; then
    unset un
    i=0; while read "un[$i]"; do let i=i+1; done < "/db/online/$MAC"
    IP="${un[0]}"
    UTYPE="${un[6]}"
    LOGIN_TIME="${un[12]}"
    INTERIM="${un[13]}"
    ATTR=$((QOSCLASS*256+GID))
    IDLE_TIME=${un[9]}
    SESSION_TIME=${un[10]}
    BYTEAMOUNT=${un[11]}
    BYTEAMOUNTIN=0
    BYTEAMOUNTOUT=0
    MGMT_INDEX="${un[5]}"
    FNAME="${un[2]}"
    ONAME="${un[24]}"
#    IPv6Addr="${un[25]}"
#    GID="${un[4]}"
#    UNAME="${un[1]}"
#    QOSID="${un[21]}"
#    [ -z "$QOSID" ] && QOSID="$GID"
#    QOSCLASS="$(< /db/subscriber/group/$QOSID/qos_class)"
#    [ -z "$QOSCLASS" ] && QOSCLASS=2
    POLICYID="${un[18]}"
#    VLAN_ID="${un[23]}"
#    AUTH_METHOD=${un[22]}

    AP_DEV_ID="${un[28]}" #split tunnel
    ORI_IP="${un[31]}"

    #Deal with user name
    if [ $UTYPE = "RADIUS" ] && [ "$(< /db/subscriber/mgmt/${MGMT_INDEX}/radius/fullname)" = "DontCare" ]; then
        EFNAME="$ONAME"
    else
        EFNAME="$FNAME"
    fi
    EFNAME=$(echo ${EFNAME/'\\'/'\\'})
    EFNAME=$(echo ${EFNAME/\\\"/\"})
    #Deal with user name end

    QOS1_TIME="0"
    nIP=""
    if [ "${AP_DEV_ID}" != "0" ]; then
        IS_SP_TUNL="1"
        if [ -n "${ORI_IP}" ]; then
            tIP="${ORI_IP}"
            nIP="${IP}"
        fi
    else
        IS_SP_TUNL="0"
    fi
fi
}

function_Find()
{
local calling_station_id
local acct_session_id
local user_name
calling_station_id=$1   # C
acct_session_id=$2      # A
user_name=$3            # U
found=0

if [ -n "${acct_session_id}" -a "${ret}" != "1" ]; then
    if [ "${found}" != "1" ]; then   # U not exist
        online=$(grep -l "${acct_session_id}" /tmp/ra/* 2>/dev/null |cut -d '/' -f4)
        online=($online)
        if [ -n "${online}" ]; then
            found=1   # A found
        else
            ret=1   #A mismatch
        fi
    else   # U + A
        for(( i=0; i<${#online[*]}; i=i+1)); do
            tmp=$(grep -l "${acct_session_id}" /tmp/ra/${online[i]} 2>/dev/null)
            [ -n "${tmp}" ] && break   # A found in U
        done
        if [ -n "${tmp}" ]; then
            online=(${online[i]})   # A found in U
        else
            ret=1   # A mismatch
        fi
    fi
fi

if [ -n "${calling_station_id}" -a "${ret}" != "1" ]; then   # C
    if [ "${found}" != "1" ]; then   # U and A not exist
        [ -f "/tmp/ra/${calling_station_id}" ] && online=(${calling_station_id})
        [ -z "${online}" ] && ret=1   # C mismatch
    else   # U or A + C
        for(( i=0; i<${#online[*]}; i=i+1)); do
            [ "${calling_station_id}" = "${online[i]}" ] && break
        done
        if [ ${i} -lt ${#online[*]} ]; then
            online=(${calling_station_id})   # C found in U or A
        else
            ret=1   # C mismatch
        fi
    fi
fi

if [ -n "${user_name}" ]; then  # U
    online=$(grep -lw "${user_name}" /db/online/* 2>/dev/null |cut -d '/' -f4)
    online=($online)
    if [ -n "${online}" ]; then
        found=1   # U found
    else
        ret=1   # U mismatch
    fi
fi

[ "${ret}" = "1" ] && online=()
echo "${online[*]}"
}

function_DM(){
local calling_station_id
local acct_session_id
local user_name
calling_station_id=$1
acct_session_id=$2
user_name=$3

online=($(function_Find "${calling_station_id}" "${acct_session_id}" "${user_name}"))
if [ -n "${online}" ]; then
    for(( i=0; i<${#online[*]}; i=i+1)); do
        /ramfs/bin/nam_kick "${online[i]}" 'Disconnect Message' > /dev/null 2>&1
    done
    if [ -z "${acct_terminate_cause}" ]; then
        dump "Acct-Terminate-Cause" "6" ":="   # Admin-Reset
    else
        dump "Acct-Terminate-Cause" "${acct_terminate_cause}" ":="
    fi
else
    dump "Error-Cause" "503" ":="   # Session Context Not Found: no such user
    exit 1
fi

}

function_CoA() 
{
local calling_station_id
local acct_session_id
local user_name
calling_station_id=$1
acct_session_id=$2
user_name=$3
CIPGWCLI=/ramfs/bin/cipgwcli
MAC_ADD=/ramfs/bin/mac_add.sh

online=($(function_Find "${calling_station_id}" "${acct_session_id}" "${user_name}"))
if [ -n "${online}" ]; then
    if [ ${#online[*]} -eq 1 ]; then
        read_online_file "${online}"
    else
        dump "Error-Cause" "503" ":="   # Session Context Not Found: no such user
        exit 1
    fi
elif [ -z "${calling_station_id}" -o -z "${user_name}" ]; then
    dump "Error-Cause" "402" ":="   # Missing Attribute: calling_station_id/acct_session_id/user_name
    exit 1
else
    online=${calling_station_id}
    mgmt_id=$(getmgmtid "${user_name}")
    sz_id=$(/ramfs/bin/ip2sz.sh "${framed_ip_address}")
    [ -z "${acct_session_id}" ] && acct_session_id="$(/ramfs/bin/create_acct_session_id.sh)"
fi

RADIR=/tmp/ra/${online}
RATMP=/tmp/${online}
[ -f "${RADIR}" ] && cp "${RADIR}" "${RATMP}"
DBDIR=/db/online/${online}

    [ -z "${idle_timeout}" ] && idle_timeout=$IDLE_TIME
    [ -z "${acct_interim_interval}" ] && acct_interim_interval=$INTERIM
    [ -z "${session_timeout}" ] && session_timeout=$SESSION_TIME

    WISPR_SESSION_TERMINATE_TIME=$(grep 'WISPR-SESSION-TERMINATE-TIME=' "${RATMP}" 2>/dev/null |cut -d '=' -f2)
    WISPR_SESSION_TERMINATE_END_OF_DAY=$(grep 'WISPR-SESSION-TERMINATE-END-OF-DAY=' "${RATMP}" 2>/dev/null |cut -d '=' -f2)
    WISPR_SESSION_TERMINATE_BILLING_TIME=$(grep 'WISPR-SESSION-TERMINATE-BILLING-TIME=' "${RATMP}" 2>/dev/null |cut -d '=' -f2)
    if [ "${wispr_session_terminate_time}" ]; then  # an absolute time
        wstt=$(echo "${wispr_session_terminate_time}" | sed -e "s/T/ /g" |cut -d '+' -f1)  # ex:'2011-01-01T10:30:00+0800' -> '2011-01-01 10:30:00'
        wstt=$(date -d "${wstt}" +%s)   # ex:'2011-01-01 10:30:00' -> '1293849000'
        now=$(date +%s)
        val=$((wstt - now))
        if [ "${val}" -le "0" ]; then  # wstt is the past time
            dump "Error-Cause" "404" ":="  # Invalid Request: wispr_session_terminate_time is past
            exit 1
        fi
        if [ "${session_timeout}" = "0" -o "${session_timeout}" -gt "${val}" ]; then
            # available session time is greater than the interval, use the interval
            session_timeout=${val}
        fi
        WISPR_SESSION_TERMINATE_END_OF_DAY=""
    elif [ "${wispr_session_terminate_end_of_day}" ]; then  # disconnect from the billing time
        if [ "${wispr_session_terminate_end_of_day}" = "1" ]; then  # enabled
            nhour=$(date +%H); nhour=$(( $((10#$nhour)) *3600))
            nmin=$(date +%M); nmin=$(( $((10#$nmin)) *60))
            bhour=$(echo "${WISPR_SESSION_TERMINATE_BILLING_TIME}" |cut -d ':' -f1)
            bmin=$(echo "${WISPR_SESSION_TERMINATE_BILLING_TIME}" |cut -d ':' -f2)
            if [ -z "${bhour}" -o -z "${bmin}" ]; then
                bhour=$(( $(get_wispr_billing_time ${IP} "hour") *3600))
                bmin=$(( $(get_wispr_billing_time ${IP} "minute") *60))
                WISPR_SESSION_TERMINATE_BILLING_TIME="$((${bhour} /3600)):$((${bmin} /60))"
            fi
            val=$(( (bhour + bmin) - (nhour + nmin) ))
            if [ "${val}" -le "0" ]; then
                val=$(( val + 86400 ))  # billing time of next day
            fi
            # use val as the session time if total session is greater than val */
            if [ "${session_timeout}" = "0" -o "${session_timeout}" -gt "${val}" ]; then
                session_timeout="${val}"
            fi
            WISPR_SESSION_TERMINATE_TIME=""
        fi
    else
        wispr_session_terminate_time="${WISPR_SESSION_TERMINATE_TIME}"
        wispr_session_terminate_end_of_day="${WISPR_SESSION_TERMINATE_END_OF_DAY}"
    fi

#    if [ "${class}" ]; then
#        ret=1 
#    fi

#    if [ "${wispr_bandwidth_min_up}" -o "${wispr_bandwidth_max_up}" -o "${wispr_bandwidth_min_down}" -o "${wispr_bandwidth_max_down}" ]; then
#        ret=1
#    fi

    WISPR_BILLING_CLASS_OF_SERVICE=$(grep 'WISPR-BILLING-CLASS-OF-SERVICE=' "${RATMP}" 2>/dev/null |cut -d '=' -f2)
    if [ -z "${wispr_billing_class_of_service}" ]; then
        wispr_billing_class_of_service="${WISPR_BILLING_CLASS_OF_SERVICE}"
    fi

    ZVENDOR_BYTE_AMOUNT_4GB=$(grep 'ZVENDOR-BYTE-AMOUNT-4GB=' "${RATMP}" 2>/dev/null |cut -d '=' -f2)
    ZVENDOR_BYTE_AMOUNT=$(grep 'ZVENDOR-BYTE-AMOUNT=' "${RATMP}" 2>/dev/null |cut -d '=' -f2)
    if [ "${zvendor_byte_amount_4gb}" -o "${zvendor_byte_amount}" ]; then
        [ -z "${ZVENDOR_BYTE_AMOUNT_4GB}" ] && ZVENDOR_BYTE_AMOUNT_4GB=0
        [ -z "${ZVENDOR_BYTE_AMOUNT}" ] && ZVENDOR_BYTE_AMOUNT=0
        [ -z "${zvendor_byte_amount_4gb}" ] && zvendor_byte_amount_4gb="${ZVENDOR_BYTE_AMOUNT_4GB}"
        [ -z "${zvendor_byte_amount}" ] && zvendor_byte_amount="${ZVENDOR_BYTE_AMOUNT}"
        ByteAmount=$((zvendor_byte_amount + 4294967296 * zvendor_byte_amount_4gb))
    else
        ByteAmount=$BYTEAMOUNT
        zvendor_byte_amount_4gb="${ZVENDOR_BYTE_AMOUNT_4GB}"
        zvendor_byte_amount="${ZVENDOR_BYTE_AMOUNT}"
    fi
    ZVENDOR_MAXBYTEIN_4GB=$(grep 'ZVENDOR-MAXBYTEIN-4GB=' "${RATMP}" 2>/dev/null |cut -d '=' -f2)
    ZVENDOR_MAXBYTEIN=$(grep 'ZVENDOR-MAXBYTEIN=' "${RATMP}" 2>/dev/null |cut -d '=' -f2)
    if [ "${zvendor_maxbytein_4gb}" -o "${zvendor_maxbytein}" ]; then
        [ -z "${ZVENDOR_MAXBYTEIN_4GB}" ] && ZVENDOR_MAXBYTEIN_4GB=0
        [ -z "${ZVENDOR_MAXBYTEIN}" ] && ZVENDOR_MAXBYTEIN=0
        [ -z "${zvendor_maxbytein_4gb}" ] && zvendor_maxbytein_4gb="${ZVENDOR_MAXBYTEIN_4GB}"
        [ -z "${zvendor_maxbytein}" ] && zvendor_maxbytein="${ZVENDOR_MAXBYTEIN}"
        ByteAmountIn=$((zvendor_maxbytein + 4294967296 * zvendor_maxbytein_4gb))
    else
        ByteAmountIn=$BYTEAMOUNTIN
        zvendor_maxbytein_4gb="${ZVENDOR_MAXBYTEIN_4GB}"
        zvendor_maxbytein="${ZVENDOR_MAXBYTEIN}"
    fi
    ZVENDOR_MAXBYTEOUT_4GB=$(grep 'ZVENDOR-MAXBYTEOUT-4GB=' "${RATMP}" 2>/dev/null |cut -d '=' -f2)
    ZVENDOR_MAXBYTEOUT=$(grep 'ZVENDOR-MAXBYTEOUT=' "${RATMP}" 2>/dev/null |cut -d '=' -f2)
    if [ "${zvendor_maxbyteout_4gb}" -o "${zvendor_maxbyteout}" ]; then
        [ -z "${ZVENDOR_MAXBYTEOUT_4GB}" ] && ZVENDOR_MAXBYTEOUT_4GB=0
        [ -z "${ZVENDOR_MAXBYTEOUT}" ] && ZVENDOR_MAXBYTEOUT=0
        [ -z "${zvendor_maxbyteout_4gb}" ] && zvendor_maxbyteout_4gb="${ZVENDOR_MAXBYTEOUT_4GB}"
        [ -z "${zvendor_maxbyteout}" ] && zvendor_maxbyteout="${ZVENDOR_MAXBYTEOUT}"
        ByteAmountOut=$((zvendor_maxbyteout + 4294967296 * zvendor_maxbyteout_4gb))
    else
        ByteAmountOut=$BYTEAMOUNTOUT
        zvendor_maxbyteout_4gb="${ZVENDOR_MAXBYTEOUT_4GB}"
        zvendor_maxbyteout="${ZVENDOR_MAXBYTEOUT}"
    fi

    if [ "${ret}" != "1" ]; then  # 0=no error, 1=something wrong
        # delete modified attributes to ra file
        sed_del_ra=$(sed -i "/_byte_amount/d;/ZVENDOR-BYTE-AMOUNT-4GB/d;/ZVENDOR-BYTE-AMOUNT/d;/ZVENDOR-MAXBYTEIN-4GB/d;/ZVENDOR-MAXBYTEIN/d;/ZVENDOR-MAXBYTEOUT-4GB/d;/ZVENDOR-MAXBYTEOUT/d;/WISPR-BILLING-CLASS-OF-SERVICE/d;/WISPR-SESSION-TERMINATE-TIME/d;/WISPR-SESSION-TERMINATE-END-OF-DAY/d;/WISPR-SESSION-TERMINATE-BILLING-TIME/d;/IDLE-TIMEOUT/d;/ACCT-INTERIM-INTERVAL/d;/SESSION-TIMEOUT/d" "${RATMP}" 2>/dev/null) 
        # append modified attributes to ra file
        [ "${zvendor_byte_amount_4gb}" ] && echo -e "ZVENDOR-BYTE-AMOUNT-4GB=${zvendor_byte_amount_4gb}" >> "${RATMP}" 2>/dev/null
        [ "${zvendor_byte_amount}" ] && echo -e "ZVENDOR-BYTE-AMOUNT=${zvendor_byte_amount}" >> "${RATMP}" 2>/dev/null
        [ "${ByteAmount}" ] && echo -e "_byte_amount=${ByteAmount}" >> "${RATMP}" 2>/dev/null
        [ "${zvendor_maxbytein_4gb}" ] && echo -e "ZVENDOR-MAXBYTEIN-4GB=${zvendor_maxbytein_4gb}" >> "${RATMP}" 2>/dev/null
        [ "${zvendor_maxbytein}" ] && echo -e "ZVENDOR-MAXBYTEIN=${zvendor_maxbytein}" >> "${RATMP}" 2>/dev/null
        [ "${zvendor_maxbyteout_4gb}" ] && echo -e "ZVENDOR-MAXBYTEOUT-4GB=${zvendor_maxbyteout_4gb}" >> "${RATMP}" 2>/dev/null
        [ "${zvendor_maxbyteout}" ] && echo -e "ZVENDOR-MAXBYTEOUT=${zvendor_maxbyteout}" >> "${RATMP}" 2>/dev/null
        [ "${wispr_billing_class_of_service}" ] && echo -e "WISPR-BILLING-CLASS-OF-SERVICE=${wispr_billing_class_of_service}" >> "${RATMP}" 2>/dev/null
        [ "${wispr_session_terminate_time}" ] && echo -e "WISPR-SESSION-TERMINATE-TIME=${wispr_session_terminate_time}" >> "${RATMP}" 2>/dev/null
        [ "${wispr_session_terminate_end_of_day}" ] && echo -e "WISPR-SESSION-TERMINATE-END-OF-DAY=${wispr_session_terminate_end_of_day}\nWISPR-SESSION-TERMINATE-BILLING-TIME=${WISPR_SESSION_TERMINATE_BILLING_TIME}" >> "${RATMP}" 2>/dev/null
        # replace modified attributes to ra file
        echo -e "IDLE-TIMEOUT=${idle_timeout}" >> "${RATMP}" 2>/dev/null
        echo -e "ACCT-INTERIM-INTERVAL=${acct_interim_interval}" >> "${RATMP}" 2>/dev/null
        echo -e "SESSION-TIMEOUT=${session_timeout}" >> "${RATMP}" 2>/dev/null

        # replace modified attributes to online file
        [ -f "${DBDIR}" ] && sed_db=$(sed -i "10s/$IDLE_TIME/$idle_timeout/;14s/$INTERIM/$acct_interim_interval/;11s/$SESSION_TIME/$session_timeout/" "${DBDIR}" 2>/dev/null)

        # replace byteamount to online file
        [ -f "${DBDIR}" ] && sed_amount_db=$(sed -i "12s/$BYTEAMOUNT/$ByteAmount/" "${DBDIR}" 2>/dev/null)

        # get period and thres config
        PERIOD=0
        THRES=0
        if [ "${PKG_IDLE_FLOW_DETECT}" = "Enabled" ]; then
            group_path="/db/subscriber"
            if [ "${PKG_IDLE_FLOW_DETECT_GROUP}" = "Enabled" -a "${POLICYID}" != "0" -a -f "${group_path}/group/${POLICYID}/logout_period" ]; then
                PERIOD="$(< ${group_path}/group/${POLICYID}/logout_period)"
            else
                [ -f "${group_path}/logout_period" ] && PERIOD="$(< ${group_path}/logout_period)"
            fi
            if [ "${PKG_IDLE_FLOW_DETECT_GROUP}" = "Enabled" -a "${POLICYID}" != "0" -a -f "${group_path}/group/${POLICYID}/logout_thres" ]; then
                THRES="$(< ${group_path}/group/${POLICYID}/logout_thres)"
            else
                [ -f "${group_path}/logout_thres" ] && THRESHOLD="$(< ${group_path}/logout_thres)"
            fi
            [ "${THRES}" = "0" ] && PERIOD=0
        fi

        # register modified attributes to system
        if [ -f "${DBDIR}" ]; then
            exec_cipgwcli=$(${CIPGWCLI} login "${online}" "${EFNAME}" "${online}" "${IP}" "${IPv6Addr}" "${ATTR}" "${PERIOD}" "${THRES}" "${idle_timeout}" "${session_timeout}" "${ByteAmount}" "${ByteAmountIn}" "${ByteAmountOut}" "${LOGIN_TIME}" "${UTYPE}" "${acct_interim_interval}" "${IS_SP_TUNL}" "${QOS1_TIME}")
        else
            exec_mac_add=$(sh -x ${MAC_ADD} "${calling_station_id}" "${user_name}" "${mgmt_id}" "${session_timeout}" "${idle_timeout}" "${acct_interim_interval}" "${REPLIED_CLASS}" "${zvendor_byte_amount_4gb}" "${zvendor_byte_amount}" "${zvendor_maxbytein_4gb}" "${zvendor_maxbytein}" "${zvendor_maxbyteout_4gb}" "${zvendor_maxbyteout}" "${sz_id}" "${NAS_PORT}" "${acct_session_id}" "1" "${wispr_bandwidth_min_up}:${wispr_bandwidth_max_up}" "${wispr_bandwidth_min_down}:${wispr_bandwidth_max_down}" "${WISPR_REDIRECTION_URL}" "${wispr_session_terminate_time}" "${wispr_session_terminate_end_of_day}" "${wispr_billing_class_of_service}" "CoA" "${FRAMED_IP_ADDRESS}" "${ZVENDOR_GROUP}" "${CHARGEABLE_USER_IDENTITY}")
        fi

        [ -f "${RATMP}" ] && mv "${RATMP}" "${RADIR}"
    else
        [ -f "${RATMP}" ] && rm -f "${RATMP}" 
        dump "Error-Cause" "401" ":="  # Unsupported Attribute: class, wispr_bandwidth_min_up, wispr_bandwidth_max_up, wispr_bandwidth_min_down, wispr_bandwidth_max_down 
    fi
}

####### Begin #######
nas_info=$(get_nas_info ${packet_src_ip_address})   # get_nas_info from nas_list
if [ "${packet_src_ip_address}" != "127.0.0.1" ]; then
    if [ "${nas_info%% *}" = "3" ]; then   # 3 = DM&CoA
        if [ -z "${called_station_id}" ]; then
            dump "Error-Cause" "402" ":="   # Missing Attribute: called_station_id
            ret=1
        else
            if [ "${called_station_id}" != `< "/db/wan/mac"`  -a "${called_station_id}" != `< "/db/wan2/mac"` ]; then
                 dump "Error-Cause" "403" ":="   # NAS-Identification Mismatch: called_station_id
                 ret=1
            else
                if [ -z "${calling_station_id}" -a -z "${acct_session_id}" -a -z "${user_name}" ]; then
                    dump "Error-Cause" "402" ":="   # Missing Attribute: calling_station_id, acct_session_id, user_name
                    ret=1
                else
                    if [ "${packet_type}" = 'Disconnect-Request' ]; then
                        function_DM "${calling_station_id}" "${acct_session_id}" "${user_name}"
                    elif [ "${packet_type}" = 'CoA-Request' ]; then
                        function_CoA "${calling_station_id}" "${acct_session_id}" "${user_name}"
                    else
                        dump "Error-Cause" "404" ":="   # Invalid Request: packet_type
                        ret=1
                    fi
                fi
            fi
        fi
    else
        dump "Error-Cause" "405" ":="   # Unsupported Service
        ret=1
    fi
else
    dump "Error-Cause" "405" ":="   # Unsupported Service
    ret=1
fi

exit $ret
####### End #######
