#!/bin/sh
# Copyright (C) 2006 OpenWrt.org

[ -f /etc/board.json ] || exit 0

. /lib/functions.sh
. /usr/share/libubox/jshn.sh
. /lib/functions/network.sh

usage() {
	cat <<EOF
Usage: $0 [config|up|down|reconf|reload|status]
enables (default), disables or configures devices not yet configured.
EOF
	exit 1
}

ubus_wifi_cmd() {
	local cmd="$1"
	local dev="$2"

	json_init
	[ -n "$2" ] && json_add_string device "$2"
	ubus call network.wireless "$1" "$(json_dump)"
}

find_net_config() {(
	local vif="$1"
	local cfg
	local ifname

	config_get cfg "$vif" network

	[ -z "$cfg" ] && {
		include /lib/network
		scan_interfaces

		config_get ifname "$vif" ifname

		cfg="$(find_config "$ifname")"
	}
	[ -z "$cfg" ] && return 0
	echo "$cfg"
)}


bridge_interface() {(
	local cfg="$1"
	[ -z "$cfg" ] && return 0

	include /lib/network
	scan_interfaces

	for cfg in $cfg; do
		config_get iftype "$cfg" type
		[ "$iftype" = bridge ] && config_get "$cfg" ifname
		prepare_interface_bridge "$cfg"
		return $?
	done
)}

prepare_key_wep() {
	local key="$1"
	local hex=1

	echo -n "$key" | grep -qE "[^a-fA-F0-9]" && hex=0
	[ "${#key}" -eq 10 -a $hex -eq 1 ] || \
	[ "${#key}" -eq 26 -a $hex -eq 1 ] || {
		[ "${key:0:2}" = "s:" ] && key="${key#s:}"
		key="$(echo -n "$key" | hexdump -ve '1/1 "%02x" ""')"
	}
	echo "$key"
}

wifi_fixup_hwmode() {
	local device="$1"
	local default="$2"
	local hwmode hwmode_11n

	config_get channel "$device" channel
	config_get hwmode "$device" hwmode
	case "$hwmode" in
		11bg) hwmode=bg;;
		11a) hwmode=a;;
		11ad) hwmode=ad;;
		11b) hwmode=b;;
		11g) hwmode=g;;
		11n*)
			hwmode_11n="${hwmode##11n}"
			case "$hwmode_11n" in
				a|g) ;;
				default) hwmode_11n="$default"
			esac
			config_set "$device" hwmode_11n "$hwmode_11n"
		;;
		*)
			hwmode=
			if [ "${channel:-0}" -gt 0 ]; then
				if [ "${channel:-0}" -gt 14 ]; then
					hwmode=a
				else
					hwmode=g
				fi
			else
				hwmode="$default"
			fi
		;;
	esac
	config_set "$device" hwmode "$hwmode"
}

wifi_fixup_wan() {
	local inet_src
	local wan_type

	wan_type=$(uci get network.wan.type 2> /dev/null)
	wan_vlan=$(uci -q get network.wan_vlan 2> /dev/null)
	if [ "$wan_type" = "bridge" ] || [ -n "$wan_vlan" ]; then
		return
	fi

	inet_src=$(uci get network.wan.inet_src 2> /dev/nul)
	if [ "${inet_src%[0-9]}" != "wlan" ]; then
		return
	fi

	include /lib/network

	# XXX(edzius): hack to tell netifd about VAP net device
	# which acts as standalone internet source. In this case
	# netifd has no track of VAP interfaces because qcawifi
	# and netifd runs almost independently of each other so
	# in conclusion STA VAP is neither bridged nor bound to
	# network zone. After this call netifd is informed that
	# 'wan' zone must contain STA VAP, and setup required
	# protocols.
	setup_interface $inet_src wan
}

get_wifi_macaddr() {
	local mtdblock='' macaddr=''
	local board=$(board_name)
	local offset=0 shift=0

	case $board in
	edgecore,eap101)
		shift=3
	;;
	edgecore,eap102|\
	edgecore,oap103)
		shift=2
	;;
	edgecore,eap104)
		shift=5
	;;
	esac

	case "$1" in
	wlan0)
		offset=$((6 * $shift))
	;;
	wlan1)
		offset=$((6 * ($shift + 1)))
	;;
	esac
	[ -n "${offset}" ] && {
		case $board in
			edgecore,eap101|\
			edgecore,eap102)
				mtdblock=$(find_mtd_part 0:Product_Info 2>/dev/null)
				;;
			edgecore,eap104)
				mtdblock=$(find_mtd_part 0:ART 2>/dev/null)
				;;
		esac
	}
	[ -n "${mtdblock}" ] && macaddr=$(hexdump -v -n 6 -s "${offset}" -e '5/1 "%02x:" 1/1 "%02x"' "${mtdblock}" 2>/dev/null)
	if [ -z "${macaddr}" ]; then
		return 0
	fi
	[ "${macaddr}" != "00:00:00:00:00:00" ] && { [ "$(echo "$((1&0x${macaddr%%:*}))")" = 0 ]; } 2>/dev/null || macaddr=
	echo -n "${macaddr}"
}

wifi_fixup_wan_mac() {
	# XXX(martynas): hack to make sure br-wan has
	# the same mac as inet_src interface mac

	local inet_src
	local wan_type
	local inet_mac
	local wan_dev

	wan_type=$(uci get network.wan.type 2> /dev/null)
	inet_src=$(uci get network.wan.inet_src 2> /dev/nul)
	wan_vlan=$(uci -q get network.wan_vlan 2> /dev/null)

	if [ "$wan_type" = "bridge" ] || [ -n "$wan_vlan" ] && [ "${inet_src%[0-9]}" = "wlan" ]; then
		inet_mac=$(cat /sys/class/net/$inet_src/address 2> /dev/null)

		#case "${inet_mac}" in
		#00:03:7f:*|00:00:00:*|ff:*|'')
			local phymac="$(get_wifi_macaddr "${inet_src}")"
			[ -n "${phymac}" ] && inet_mac="${phymac}"
		#;;
		#esac

		[ -n "$inet_mac" ] && {
			# in boot up, only change hw ether is not work, need to add config
			uci set network.wan.macaddr="$inet_mac"
			uci commit network
			network_get_device wan_dev "wan"
			ifconfig $wan_dev hw ether "$inet_mac"
		}
#	else
#		uci delete network.wan.macaddr
#		uci commit network
	fi
	return
}

_wifi_updown() {
	for device in ${2:-$DEVICES}; do (
		config_get disabled "$device" disabled
		[ "$disabled" = "1" ] && {
			echo "'$device' is disabled"
			set disable
		}
		config_get iftype "$device" type
		if eval "type ${1}_$iftype" 2>/dev/null >/dev/null; then
			eval "scan_$iftype '$device'"
			eval "${1}_$iftype '$device'" || echo "$device($iftype): ${1} failed"
		elif [ ! -f /lib/netifd/wireless/$iftype.sh ]; then
			echo "$device($iftype): Interface type not supported"
		fi
	); done
}

wifi_updown() {
	cmd=down
	[ enable = "$1" ] && {
		_wifi_updown disable "$2"
		ubus_wifi_cmd "$cmd" "$2"
		scan_wifi
		cmd=up

		[ "$(uci -q get acn.mgmt.management)" -ne 3 ] && /etc/init.d/prc start
		ubus call network reload
	}
	[ reconf = "$1" ] && {
		scan_wifi
		cmd=reconf
		ubus call network reload
	}
	ubus_wifi_cmd "$cmd" "$2"
	_wifi_updown "$@"
}

wifi_reload_legacy() {
	_wifi_updown "disable" "$1"
	scan_wifi
	_wifi_updown "enable" "$1"
	# XXX(edzius): VAP's are initialized by call above
	# so races are not relevant here.
	wifi_fixup_wan
	wifi_fixup_wan_mac
}

wifi_reload() {
	ubus call network reload
	wifi_reload_legacy
}

wifi_detect_notice() {
	>&2 echo "WARNING: Wifi detect is deprecated. Use wifi config instead"
	>&2 echo "For more information, see commit 5f8f8a366136a07df661e31decce2458357c167a"
	exit 1
}

wifi_config() {
	[ ! -f /etc/config/wireless ] && touch /etc/config/wireless

	for driver in $DRIVERS; do (
		if eval "type detect_$driver" 2>/dev/null >/dev/null; then
			eval "detect_$driver" || echo "$driver: Detect failed" >&2
		else
			echo "$driver: Hardware detection not supported" >&2
		fi
	); done
}

start_net() {(
	local iface="$1"
	local config="$2"
	local vifmac="$3"

	[ -f "/var/run/$iface.pid" ] && kill "$(cat /var/run/${iface}.pid)" 2>/dev/null
	[ -z "$config" ] || {
		include /lib/network
		scan_interfaces
		for config in $config; do
			setup_interface "$iface" "$config" "" "$vifmac"
		done
	}
)}

set_wifi_up() {
	local cfg="$1"
	local ifname="$2"
	uci_set_state wireless "$cfg" up 1
	uci_set_state wireless "$cfg" ifname "$ifname"
}

set_wifi_down() {
	local cfg="$1"
	local vifs vif vifstr

	[ -f "/var/run/wifi-${cfg}.pid" ] &&
		kill "$(cat "/var/run/wifi-${cfg}.pid")" 2>/dev/null
	uci_revert_state wireless "$cfg"
	config_get vifs "$cfg" vifs
	for vif in $vifs; do
		uci_revert_state wireless "$vif"
	done
}

scan_wifi() {
	local cfgfile="$1"
	DEVICES=
	config_cb() {
		local type="$1"
		local section="$2"

		# section start
		case "$type" in
			wifi-device)
				append DEVICES "$section"
				config_set "$section" vifs ""
				config_set "$section" ht_capab ""
			;;
		esac

		# section end
		config_get TYPE "$CONFIG_SECTION" TYPE
		case "$TYPE" in
			wifi-iface)
				config_get device "$CONFIG_SECTION" device
				config_get vifs "$device" vifs
				append vifs "$CONFIG_SECTION"
				config_set "$device" vifs "$vifs"
			;;
		esac
	}
	config_load "${cfgfile:-wireless}"
}

DEVICES=
DRIVERS=
include /lib/wifi
scan_wifi

case "$1" in
	down) wifi_updown "disable" "$2";;
	detect) wifi_detect_notice ;;
	config) wifi_config ;;
	status) ubus_wifi_cmd "status" "$2";;
	reload) wifi_reload "$2";;
	reload_legacy) wifi_reload_legacy "$2";;
	--help|help) usage;;
	reconf) wifi_updown "reconf" "$2";;
	''|up) wifi_updown "enable" "$2";;
	*) usage; exit 1;;
esac
