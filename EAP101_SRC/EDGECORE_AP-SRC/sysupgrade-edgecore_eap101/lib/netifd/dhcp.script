#!/bin/sh
[ -z "$1" ] && echo "Error: should be run by udhcpc" && exit 1

. /lib/functions.sh
. /lib/netifd/netifd-proto.sh
CLOUD_DN="cloud.ignitenet.com staging.ignitenet.com"
CAPWAP_PATH=/tmp/capwap
DHCP_OPT_FILE=${CAPWAP_PATH}/dhcp_opt.txt
DHCP_OPT_FILE_TMP=${CAPWAP_PATH}/dhcp_opt_tmp.txt

set_capwap_ip()
{
	local ip
	if [ ! -d "${CAPWAP_PATH}" ]; then
		mkdir -p ${CAPWAP_PATH}
	fi
	for ip in ${capwap}; do
		if [ ! -f ${DHCP_OPT_FILE_TMP} ] || [ -z "$(grep "^${ip}$" ${DHCP_OPT_FILE_TMP})" ]; then
			echo ${ip} >> ${DHCP_OPT_FILE_TMP}
		fi
	done
	if ! cmp -s "${DHCP_OPT_FILE}" "${DHCP_OPT_FILE_TMP}"; then
		mv ${DHCP_OPT_FILE_TMP} ${DHCP_OPT_FILE}
		/etc/init.d/capwap restart
	fi
}

set_classless_routes() {
	local max=128
	while [ -n "$1" -a -n "$2" -a $max -gt 0 ]; do
		proto_add_ipv4_route "${1%%/*}" "${1##*/}" "$2" "$ip"
		max=$(($max-1))
		shift 2
	done
}

cmp_network() {
	local iface="$1"
	local ipnet="$2"
	local ipaddr
	local netmask
	local ipnet_cfg
	local proto

	config get proto "$iface" proto

	if [ "$proto" == "dhcp" ]; then
		config_get ipaddr "$iface" fallback_ip
		config_get netmask "$iface" fallback_nm
	else
		config_get ipaddr "$iface" ipaddr
		config_get netmask "$iface" netmask
	fi

	if [ "$ipaddr" != "" -a  "$netmask" != "" ]; then
		ipnet_cfg=$(ipcalc -n $ipaddr $netmask | cut -d'=' -f2)

		if [ "$ipnet" == "$ipnet_cfg" ]; then
			return 1
		fi
	fi

	return 0
}

change_ip() {
	local ifname="$1"
	local ipnet="$2"
	local counter=2
	local proto

	config get proto "$iface" proto

	while [ $counter -lt 253 ]; do
		newnet="192.168."$counter".0"
		find_ip_conflicts $newnet 0
		if [ "$?" == "0" ]; then
			local fallback
			udhcpc_pid="$(pidof udhcpc)"
			logger -t netifd -p daemon.notice -s "$interface ($udhcpc_pid): ip address conflicts with $ifname, change ip address to 192.168.$counter.1"

			if [ "$proto" == "dhcp" ]; then
				uci set network.$ifname.fallback_ip="192.168."$counter".1"
				uci set network.$ifname.fallback_nm="255.255.255.0"
			else
				uci set network.$ifname.ipaddr="192.168."$counter".1"
				uci set network.$ifname.netmask="255.255.255.0"
			fi

			uci commit
			config_load network
			break
		fi

		counter=$(( counter + 1 ))
	done
}

find_ip_conflicts() {
	local ipnet="$1"
	local change="$2"
	local cmp_network="0"

	for iface in $CONFIG_SECTIONS; do
		cmp_network $iface $ipnet
		cmp_network_ret="$?"
		if [ "$cmp_network_ret" = "1" -a "$iface" != "$config_section" ]; then
			if [ "$change" = "1" ]; then
				change_ip $iface $ipnet

				if [ "$(uci -q get acn.wizard.ez_setup)" != "0" ]; then
					ifdown $iface; sleep 1; ifup $iface
				fi
				need_reload=1
			else
				return 1
			fi
		fi
	done

	return 0
}

setup_interface () {
	local status="$1"

	need_reload=0
	proto_init_update "*" 1
	proto_add_ipv4_address "$ip" "${subnet:-255.255.255.0}"
	# TODO: apply $broadcast

	# added checking the IP address conflicts with LAN subnet. Jason Huang 2016/01/05.

	if [ "$status" != "fail" -a "$status" != "leasefail" ]; then
		ipnet="$(ipcalc -n $ip $subnet | cut -d'=' -f2)"
		config_load network
		find_ip_conflicts $ipnet 1

		if [ "$need_reload" == "1" ]; then
			/sbin/reload_config
		fi
	fi

	local ip_net
	eval "$(ipcalc.sh "$ip/$mask")";ip_net="$NETWORK"

	local i
	for i in $router; do
		local gw_net
		eval "$(ipcalc.sh "$i/$mask")";gw_net="$NETWORK"

		[ "$ip_net" != "$gw_net" ] && proto_add_ipv4_route "$i" 32 "" "$ip"
		proto_add_ipv4_route 0.0.0.0 0 "$i" "$ip"

		local r
		for r in $CUSTOMROUTES; do
			proto_add_ipv4_route "${r%%/*}" "${r##*/}" "$i" "$ip"
		done
	done

	# CIDR STATIC ROUTES (rfc3442)
	[ -n "$staticroutes" ] && set_classless_routes $staticroutes
	[ -n "$msstaticroutes" ] && set_classless_routes $msstaticroutes

	for i in $dns; do
		proto_add_dns_server "$i"
	done
	for i in $domain; do
		proto_add_dns_search "$i"
	done

	# TODO: Deprecate timesvr in favor of timesrv
	if [ -n "$timesvr" -a -z "$timesrv" ]; then
		timesrv="$timesvr"
		echo "Environment variable 'timesvr' will be deprecated; use 'timesrv' instead."
	fi

	proto_add_data
	[ -n "$ZONE" ]     && json_add_string zone "$ZONE"
	[ -n "$ntpsrv" ]   && json_add_string ntpserver "$ntpsrv"
	[ -n "$timesrv" ]  && json_add_string timeserver "$timesrv"
	[ -n "$hostname" ] && json_add_string hostname "$hostname"
	[ -n "$message" ]  && json_add_string message "$message"
	[ -n "$timezone" ] && json_add_int timezone "$timezone"
	[ -n "$lease" ]    && json_add_int leasetime "$lease"
	proto_close_data

	proto_send_update "$INTERFACE"


	if [ "$IFACE6RD" != 0 -a -n "$ip6rd" ]; then
		local v4mask="${ip6rd%% *}"
		ip6rd="${ip6rd#* }"
		local ip6rdprefixlen="${ip6rd%% *}"
		ip6rd="${ip6rd#* }"
		local ip6rdprefix="${ip6rd%% *}"
		ip6rd="${ip6rd#* }"
		local ip6rdbr="${ip6rd%% *}"

		[ -n "$ZONE" ] || ZONE=$(fw3 -q network $INTERFACE 2>/dev/null)
		[ -z "$IFACE6RD" -o "$IFACE6RD" = 1 ] && IFACE6RD=${INTERFACE}_6

		json_init
		json_add_string name "$IFACE6RD"
		json_add_string ifname "@$INTERFACE"
		json_add_string proto "6rd"
		json_add_string peeraddr "$ip6rdbr"
		json_add_int ip4prefixlen "$v4mask"
		json_add_string ip6prefix "$ip6rdprefix"
		json_add_int ip6prefixlen "$ip6rdprefixlen"
		json_add_string tunlink "$INTERFACE"
		[ -n "$IFACE6RD_DELEGATE" ] && json_add_boolean delegate "$IFACE6RD_DELEGATE"
		[ -n "$ZONE6RD" ] || ZONE6RD=$ZONE
		[ -n "$ZONE6RD" ] && json_add_string zone "$ZONE6RD"
		[ -n "$MTU6RD" ] && json_add_string mtu "$MTU6RD"
		json_close_object

		ubus call network add_dynamic "$(json_dump)"
	fi

	uci_toggle_state network $config_section lease_acquired "$(sed -ne 's![^0-9].*$!!p' /proc/uptime)"

	uci_toggle_state network $config_section lease_lifetime "$lease"
	uci_toggle_state network $config_section lease_server "${serverid}"

	[[ "$INTERFACE" = "vlan*" ]] && return

	[ -f /tmp/wan_ip ] && old_wan_ip=$(cat /tmp/wan_ip)
	if [ -n "${old_wan_ip}" ]; then
		ipset del zone_ip $old_wan_ip
		ipset del wan_ip $old_wan_ip
		ipset del wizard_ip $old_wan_ip
	fi
	ipset list zone_ip >/dev/null 2>&1 || ipset create zone_ip hash:net
	ipset list wan_ip >/dev/null 2>&1 || ipset create wan_ip hash:ip
	ipset list wizard_ip >/dev/null 2>&1 || ipset create wizard_ip hash:net

	ipset add zone_ip $ip
	ipset add wan_ip $ip
	ipset add wizard_ip $ip

	if [ "$(uci -q get acn.wizard.ez_setup)" = "0" ]; then
		for dn in $CLOUD_DN
		do
			for tmp_ip in $(nslookup "${dn}" |  awk '/Name:/{val=$NF;flag=1;next} /Address/ && flag{print $NF}')
			do
				if expr "$tmp_ip" : '[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*\.[0-9][0-9]*$' >/dev/null; then
					ipset add wizard_ip $tmp_ip
				fi
			done
		done
	fi
	[ -f /etc/init.d/cipuamd ] && /etc/init.d/cipuamd restart
	echo "$ip" > /tmp/wan_ip
	[ "$old_wan_ip" != "$ip" ] && /etc/init.d/capwap restart
}

deconfig_interface() {
	proto_init_update "*" 0
	proto_send_update "$INTERFACE"
}

config_section=$INTERFACE

DEF_INTERNET_IP="192.168.1.10"
DEF_INTERNET_NM="255.255.255.0"

json_init
json_load "$(cat /var/run/dhcpc-$interface.json)"
json_get_vars config_section fallback_ip fallback_nm
json_cleanup

if [ "$config_section" = "managementvlan" ]; then
	DEF_INTERNET_IP="192.168.100.10"
fi

# Backwards compatibility with udhcpc variables
[ -z "$INTERFACE" ] && INTERFACE=$interface

old_state="$(uci -q -P /var/state get network.$config_section.dhcp_state)"
old_ip="$(uci -q -P /var/state get network.$config_section.ipaddr)"
old_nm="$(uci -q -P /var/state get network.$config_section.netmask)"

case "$1" in
	deconfig)
		uci_toggle_state network $config_section up ""
		deconfig_interface
		uci_toggle_state network $config_section dhcp_state "$1"
	;;
	fail|leasefail)
		ip="$fallback_ip"
		subnet="$fallback_nm"
		dns=""
		domain=""
		lease=""
		router=""
		serverid=""

		if [ "$ip" = "" -o "$subnet" = "" ]; then
			ip="${DEF_INTERNET_IP}"
			subnet="${DEF_INTERNET_NM}"
		fi

		if [ "$old_state" = "fail" -o "$old_state" = "leasefail" ] &&
		   [ "$old_ip" = "$ip" -a "$old_nm" = "$subnet"  ]; then
			return;
		fi

		if [ "$old_state" != "deconfig" ]; then
			deconfig_interface
		fi

		setup_interface "$1"

		uci_toggle_state network $config_section dhcp_state "$1"
	;;
	renew|bound)
		if [ "$old_state" = "fail" -o "$old_state" = "leasefail" ]; then
			deconfig_interface
		fi

		setup_interface "$1"

		uci_toggle_state network $config_section dhcp_state "$1"
	;;
esac

if [ -n "${capwap}" ]; then
	set_capwap_ip
fi

# user rules
[ -f /etc/udhcpc.user ] && . /etc/udhcpc.user "$@"
for f in /etc/udhcpc.user.d/*; do
	[ -f "$f" ] && (. "$f" "$@")
done

exit 0
