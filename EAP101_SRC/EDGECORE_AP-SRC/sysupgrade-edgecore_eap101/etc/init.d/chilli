#!/bin/sh /etc/rc.common

START=97
STOP=31
USE_PROCD=1

. /lib/functions/network.sh

iface_to_dev() {
    local dev radid vapid

    vapid=$(echo $1 | cut -d "_" -f2)
    radid=$(echo $1 | cut -d "_" -f1 | grep -o '[0-9]*')

    dev="wlan$radid"

    if [ "$vapid" -gt 1 ]; then
        vapid=$((vapid-1))
        dev="$dev$vapid"
    fi

    echo $dev
}

parse_network() {
    config_load network
    if [ -n "$(uci -q get network.bridge.type)" ]; then
        config_get hs_ifname hotspot_vlan ports
    else
        config_get wan_type wan type
        config_get wan_ifname wan ifname
        config_get hs_ifname hotspot ifname
    fi
}

parse_wifi_iface() {
    local vap_id="$(echo "$1" | awk -F_ {'print $2'})"
    local rad_id="$(echo "$1" | awk -F_ {'print $1'} | sed 's/radio//')"
    local idx=$((rad_id*16+vap_id-1))
    local network hs_wall dev disabled
    config_get disabled "$1" disabled
    config_get network "$1" network
    config_get hs_wall "$1" hs_wall

    if [ "$disabled" == "1" -o "$network" != "hotspot" ]; then
        return
    fi

    wif_hs="on"
    config_get dev "$1" ifname
    #dev=$(iface_to_dev $1)
    hs_hotspot_devs="$hs_hotspot_devs$dev "

    if [ -n "$hs_wall" ]; then
        for dom in $hs_wall; do
            HS_UAMDOMAINSBYSSID="${HS_UAMDOMAINSBYSSID}${idx}:${dom} "
        done
    fi
}

parse_wireless() {
    config_load wireless
    config_foreach parse_wifi_iface wifi-iface
}

write_users() {
    local ufile="/etc/chilli/localusers"
    local hsmode hsradius hspass

    config_get hsmode "$1" hs_mode
    config_get hsradius "$1" hs_radius_enabled

    local hspartner
    config_get hspartner "$1" hs_partner

    echo "" > "$ufile"
    if [ "$hsmode" == "simple_pass" ]; then
        config_get hspass "$1" hs_simple_pass
        echo "default:$hspass" >> "$ufile"

    elif [ "$hsmode" == "external_portal" -a "$hspartner" == "blackbx" ]; then
        local provider_username provider_pass
        config_get provider_username "$1" hs_partner_username
        config_get provider_pass "$1" hs_partner_password

        echo "$provider_username:$provider_pass" >> $ufile

    elif [ "$hsmode" == "no_auth" -o "$hsradius" == "0" ]; then
        echo "default:default" >> "$ufile"
    fi
}

verify_cloud_crt() {
    local new_cloud_md5=$(uci get hotspot.hotspot.hs_cloud_md5)
    local cloud_pem_url=$(uci get hotspot.hotspot.hs_cloud_pem)

    if [ -n "$cloud_pem_url" -a -n "$new_cloud_md5" ]; then
        local old_cloud_md5=$(md5sum /etc/chilli/cloud.pem)

        if [ "$new_cloud_md5" != "$old_cloud_md5" ]; then
            curl -k -o /etc/chilli/cloud.pem "$cloud_pem_url"
            lines="$(egrep -n '^-.*(BEGIN|END).*PRIVATE KEY' /etc/chilli/cloud.pem | awk -F: '/BEGIN/{x=$1;}/END/{y=$1; print x","y;}')"
            sed -n "$(echo -n "$lines" | sed 's/$/ p;/')" /etc/chilli/cloud.pem > /etc/chilli/cloud.key
            cp -f /etc/chilli/cloud.pem /etc/chilli/cloud.crt
            sed -i "$(echo -n "$lines" | sed 's/$/ d;/')" /etc/chilli/cloud.crt
        fi
    else
        rm -f /etc/chilli/cloud.*
    fi
}

generate_config() {
    local conf="/etc/chilli/config"
    HS_TUNDEV="tun0"
    HS_UAMPORT="3990"
    HS_UAMUIPORT="4990"
    HS_MODE="wireless"
    HS_AAA="radius"
    HS_MACAUTHMODE="local"
    HS_LAN_ACCESS="deny"
    HS_USELOCALUSERS="off"
    HS_REDIRURL="on"
    HS_REDIRSSL="on"
    if [ -f "/etc/chilli/cloud.pem" ]; then
        HS_SSLKEYFILE="/etc/chilli/cloud.key"
        HS_SSLCERTFILE="/etc/chilli/cloud.crt"
    elif [ -f "/etc/chilli/upload.pem" ]; then
        HS_SSLKEYFILE="/etc/chilli/upload.key"
        HS_SSLCERTFILE="/etc/chilli/upload.crt"
    else
        HS_SSLKEYFILE="/etc/chilli/server.key"
        HS_SSLCERTFILE="/etc/chilli/server.crt"
    fi

    #ec-2193 use BSSID:ESSID as called station ID
    #HS_NASMAC=$(ifconfig eth0 | grep HWaddr | awk '{print $5}' | sed 's/:/-/g')
    HS_SHOW_USERNAME=1
    HS_SHOW_PASSWORD=1
    HS_SHOW_TERMS=0
    HS_HTTPPORT=$(uci get uhttpd.main.listen_http)
    HS_HTTPSPORT=$(uci get uhttpd.main.listen_https)
    local https_on=$(uci get hotspot.hotspot.hs_https)

    if [ "$https_on" == "1" ]; then
        HS_UAMUISSL="on"
        HS_UAMANYDNS="on"
        HS_HTTPS_DOMAIN="$(uci get hotspot.hotspot.hs_https_domain)"
    fi

    config_get HS_CUSTOM_MODE "$1" hs_mode
    config_get HS_PORTAL_LOGO "$1" hs_portal_logo
    config_get HS_SWAPOCTETS "$1" hs_swap_octets
    config_get HS_NETWORK "$1" network
    config_get HS_NETMASK "$1" netmask
    config_get HS_UAMLISTEN "$1" listen
    config_get HS_DYNIP "$1" dynip
    config_get HS_DYNIP_MASK "$1" dynip_mask
    config_get HS_DHCPSTART "$1" dhcpstart
    config_get HS_DHCPEND "$1" dhcpend
    config_get HS_LEASE "$1" lease
    config_get HS_DNS_DOMAIN "$1" dns_domain
    config_get HS_DNS1 "$1" dns1
    config_get HS_DNS2 "$1" dns2
    config_get HS_NASID "$1" nasid
    config_get HS_RADIUS "$1" hs_radius1
    config_get HS_RADIUS2 "$1" hs_radius2
    config_get HS_RADSECRET "$1" hs_shared
    config_get HS_UAMSECRET "$1" hs_portal_secret
    config_get HS_PORTAL_BACKGROUND "$1" hs_portal_background
    config_get HS_TERMS_FILE "$1" hs_portal_terms
    config_get HS_UAMDOMAINS "$1" hs_wall
    config_get HS_UAMFORMAT "$1" hs_portal_url
    config_get HS_MACALLOW "$1" hs_auth
    config_get HS_DEFSESSIONTIMEOUT "$1" hs_session_timeout
    config_get HS_DEFIDLETIMEOUT "$1" hs_idle_timeout
    config_get HS_RADAUTH "$1" hs_auth_port
    config_get HS_ACCT_ENABLE "$1" hs_acct_enable
    config_get HS_RADACCT "$1" hs_acct_port
    config_get HS_LOC_ID "$1" loc_id
    config_get HS_LOC_NAME "$1" loc_name
    config_get HS_PORTAL_TITLE "$1" hs_portal_header
    config_get HS_LOC_INTRO "$1" rr_hs_intro
    config_get HS_RAD_PROTO "$1" hs_radius_eaptype
    config_get HS_RADSEC_ENABLE "$1" hs_radsec_enable
    config_get HS_COASERVER "$1" hs_coaserver
    config_get HS_COASECRET "$1" hs_coasecret
    config_get HS_COAPORT "$1" hs_coaport
    config_get HS_DEFREDIRURL "$1" hs_redir_url
    config_get HS_DHCPGATEWAY "$1" dhcpgateway
    config_get HS_DHCPGATEWAYPORT "$1" dhcpgatewayport
    config_get HS_PARTNER "$1" hs_partner
    config_get HS_MACAUTH "$1" hs_macauth

    if [ -n "$(uci -q get network.bridge.type)" ]; then
        HS_LANIF="$(uci -q get network.hotspot.device)"
        HS_DHCPIF="$(uci -q get network.hotspot.device)"
    else
        HS_LANIF="br-hotspot"
        HS_DHCPIF="br-hotspot"
    fi

    [ "$HS_CUSTOM_MODE" == "no_auth" ] && {
        HS_SHOW_USERNAME=0
        HS_SHOW_PASSWORD=0
        HS_USELOCALUSERS="on"
    }

    [ "$HS_CUSTOM_MODE" == "simple_pass" ] && {
        HS_SHOW_USERNAME=0
        HS_USELOCALUSERS="on"
    }

    # According RFC6614 Section 3.4 (2), the shared secret is always "radsec"
    if [ "$HS_CUSTOM_MODE" == "external_portal" -o "$HS_CUSTOM_MODE" == "local_splash_ext_radius" ]; then
        if [ "$HS_RADSEC_ENABLE" == "1" ]; then
            HS_RADSECRET="radsec"
            HS_RADAUTH="21812"
            HS_RADACCT="21813"
        fi
    fi

    if [ "$HS_CUSTOM_MODE" == "no_auth" -o "$HS_CUSTOM_MODE" == "simple_pass" ]; then
        HS_RADAUTH="21812"
        HS_RADACCT="21813"
    fi

    if [ "$HS_PORTAL_LOGO" == "1" ]; then
        config_get HS_PORTAL_LOGO "$1" hs_portal_custom_logo
    else
        config_get HS_PORTAL_LOGO "$1" hs_portal_default_logo
    fi

    HS_PORTAL_TERMS="/etc/chilli/www/$HS_TERMS_FILE"
    [ -f "$HS_PORTAL_TERMS" ] && {
        HS_SHOW_TERMS=1
    }

    [ "$HS_PORTAL_BACKGROUND" == "" ] && {
        HS_PORTAL_BACKGROUND="#1d2024"
    }

    [ "$HS_PORTAL_TITLE" == "" ] && {
        HS_PORTAL_TITLE="$HS_LOC_NAME"
    }

    [ "$HS_DHCPGATEWAY" != "" ] && {
        HS_DHCPRELAYAGENT="$HS_UAMLISTEN"
        HS_DHCPGATEWAYNAT="on"
        HS_DYNIP=""
        HS_DYNIP_MASK=""
        HS_DHCPSTART=""
        HS_DHCPEND=""
    }

    if [ "$HS_SWAPOCTETS" == "1" ]; then
        HS_SWAPOCTETS="on"
    else
        HS_SWAPOCTETS=""
    fi

    wan_if=""
    if [ -n "$(uci -q get network.bridge.type)" ]; then
        local wan_ifname
        network_get_physdev wan_ifname "wan"
        wan_if="$wan_ifname"
    else
        if [ "$wan_type" == "bridge" ]; then
            wanvlan_enabled="$(uci get network.wanvlan.enabled 2>/dev/null)"
            wanvlan_ifname="$(uci get network.wanvlan.ifname 2>/dev/null)"

            if [ "$wanvlan_enabled" == "1" -a -n "$wanvlan_ifname" ]; then
                wan_if="$wanvlan_ifname"
            else
                wan_if="br-wan"              
            fi
        else
            wan_if="$wan_ifname"
        fi
    fi
    HS_WANIF="$wan_if"

    #ECCLOUD-2193
    local wan_ip=$(ifconfig "$wan_if" | grep 'inet addr:' | cut -d: -f2 | awk '{print $1}')
    HS_NASIP="$wan_ip"

    HS_CUSTOM_EASYSETUP="$(uci get acn.wizard.ez_setup 2>/dev/null)"
    HS_CUSTOM_WIANCOR="$(uci get addon.wianchor.hotspotEnabled 2>/dev/null)"

    [ "$HS_CUSTOM_WIANCOR" == "1" ] && {
        HS_PORTAL_BACKGROUND="#ffffff"
        HS_PORTAL_LOGO="ALOGO.png"
    }

    echo "# Generated by chilli init" > "$conf"
    IFS=$'\n'
    for var in $(set | egrep "^HS_"); do
        echo "$var" >> "$conf"
    done
    IFS=$' '
}

wait_interface() {
    local brdevs

    if [ -n "$(uci -q get network.bridge.type)" ]; then
        brdevs="$(uci get network.hotspot_vlan.ports 2>/dev/null) "
    else
        brdevs="$(uci get network.hotspot.ifname 2>/dev/null) "
    fi
    hs_hotspot_devs="$hs_hotspot_devs$brdevs$HS_LANIF"

    local count=15
    for dev in $hs_hotspot_devs; do
        local cnt=0
        while [ "$cnt" -le $count ]; do
            local state="$(ip a show $dev up 2>/dev/null | grep -c UP)"
            if [ "$state" -eq 1 ]; then
                sleep 1
                break
            fi

            logger -t "chilli.init" "($cnt/$count) waiting 1s for $dev"
            sleep 1
            cnt=$((cnt+1))
        done
    done
}

check_rc_local() {
  res="`cat /etc/rc.local | grep send_clientinfo_period.sh`"
  if [ "$res" == "" ]; then
    sed -i '$i\/sbin/send_clientinfo_period.sh boot'  /etc/rc.local
  fi
}

start_chilli() {
    local cfg="$1"
    config_get status "$1" hs_status
    [ "$status" != "1" ] && return 0

    if [ -z "$hs_ifname" -a "$wif_hs" != "on" ]; then
        return 0
    fi

    verify_cloud_crt
    generate_config "$1"
    write_users "$1"

    . /etc/chilli/functions

    check_required

    /sbin/modprobe tun >/dev/null 2>&1
    echo 1 > /proc/sys/net/ipv4/ip_forward

    [ -e /dev/net/tun ] || {
        (cd /dev;
        mkdir net;
        cd net;
        mknod tun c 10 200)
    }

    writeconfig
    radiusconfig
    wait_interface

#    check_rc_local

    [ -n "$HS_LANIF" ] && ifconfig "$HS_LANIF" 0.0.0.0

    procd_open_instance "$cfg"
    procd_set_param command /usr/sbin/chilli
    procd_append_param command -f -c /etc/chilli.conf
    procd_set_param respawn
    procd_close_instance
    local https_on=$(uci get hotspot.hotspot.hs_https 2>/dev/null)
        [ "$https_on" -eq "1" ] && {
            local https_domain=$(uci get hotspot.hotspot.hs_https_domain 2>/dev/null)
            local network_ip=$(uci get hotspot.hotspot.network 2>/dev/null)
            echo $network_ip $https_domain > /tmp/hosts/chilli
        } || rm /tmp/hosts/chilli
}

start_service() {
    parse_network
    parse_wireless
    config_load hotspot
    config_foreach start_chilli hotspot
}

stop_service() {
    ls /var/run/chilli*.pid >/dev/null 2>&1 && {
        kill $(cat /var/run/chilli*.pid 2>/dev/null)
        sleep 1
    }

    for pid in $(pidof chilli); do
        local running=$(grep -v grep /proc/${pid}/cmdline 2>/dev/null | grep -c /usr/sbin/chilli)
        if [ "$running" == "1" ]; then
            kill -9 $pid 2>/dev/null
        fi
    done

    killall -q -9 chilli_opt
    killall -q -9 chilli_radsec
    rm -f /var/run/chilli*
}

reload_service() {
    stop
    start
}

service_triggers() {
    procd_add_reload_trigger "hotspot"
    procd_add_interface_trigger "interface.*.up" "hotspot" /etc/init.d/chilli restart
}
